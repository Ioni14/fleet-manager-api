name: deploy prod
on: [push]
env:
    DOCKER_BUILDKIT: 1
jobs:
    tests:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-west-1
            -   name: Login to Amazon ECR
                uses: aws-actions/amazon-ecr-login@v1
                id: login-ecr
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1
            -   name: Build and Push image PHP test
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_php_dev
                    build-args: |
                        DUMP_ENV=1
                        ENV=test
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:test-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:test-latest
                    load: true # for "docker images"
            -   name: Build and Push image Supervisor test
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_supervisor_dev
                    build-args: |
                        DUMP_ENV=1
                        ENV=test
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:test-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:test-latest
                    load: true # for "docker images"
            -   name: Build and Push image Apache test
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_apache
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:test-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:test-latest
                    load: true
            -   name: Push images
                if: ${{ github.ref == 'refs/heads/master' }}
                run: |
                    docker push 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:test-latest
                    docker push 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:test-latest
                    docker push 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:test-latest
            -   name: Launch tests
                run: |
                    docker-compose -f docker-compose.ci.yml up -d
                    docker-compose -f docker-compose.ci.yml stop supervisor
                    USER_ID=0 make db-reset-tests
                    docker-compose -f docker-compose.ci.yml start supervisor
                    USER_ID=0 make -j2 tests
    build_deploy_beta:
        if: ${{ github.ref == 'refs/heads/master' }}
        needs: [ tests ]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-west-1
            -   name: Login to Amazon ECR
                uses: aws-actions/amazon-ecr-login@v1
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1
            -   name: Build and Push image PHP beta
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_php
                    build-args: |
                        DUMP_ENV=0
                        ENV=beta
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:beta-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:beta-latest
                    push: true
            -   name: Build and Push image Supervisor beta
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_supervisor
                    build-args: |
                        DUMP_ENV=0
                        ENV=beta
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:beta-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:beta-latest
                    push: true
            -   name: Build and Push image Apache beta
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_apache
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:beta-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:beta-latest
                    push: true
            -   name: Install SSH key
                uses: shimataro/ssh-key-action@v2
                with:
                    key: ${{ secrets.SSH_KEY_BETA }}
                    name: id_rsa
                    known_hosts: ${{ secrets.KNOWN_HOSTS_BETA }}
                    if_key_exists: fail
            -   name: Deploy
                run: |
                    ssh -i ~/.ssh/id_rsa ec2-user@api.beta.fleet-manager.space "cd ~/www && ~/deploy.sh"
    build_deploy_prod:
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        needs: [ tests ]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: eu-west-1
            -   name: Login to Amazon ECR
                uses: aws-actions/amazon-ecr-login@v1
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1
            -   name: Get the version
                id: get_version
                run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
            -   name: Build and Push image PHP prod
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_php
                    build-args: |
                        DUMP_ENV=0
                        ENV=prod
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:prod-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:prod-latest,186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-php:${{ steps.get_version.outputs.VERSION }}
                    push: true
            -   name: Build and Push image Supervisor prod
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_supervisor
                    build-args: |
                        DUMP_ENV=0
                        ENV=prod
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:prod-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:prod-latest,186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-supervisor:${{ steps.get_version.outputs.VERSION }}
                    push: true
            -   name: Build and Push image Apache prod
                uses: docker/build-push-action@v2
                with:
                    file: docker/Dockerfile
                    target: build_apache
                    cache-from: |
                        type=registry,ref=186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:prod-latest
                    cache-to: |
                        type=inline
                    tags: 186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:prod-latest,186694923554.dkr.ecr.eu-west-1.amazonaws.com/fleet-manager-api-apache:${{ steps.get_version.outputs.VERSION }}
                    push: true
            -   name: Install SSH key
                uses: shimataro/ssh-key-action@v2
                with:
                    key: ${{ secrets.SSH_KEY }}
                    name: id_rsa
                    known_hosts: ${{ secrets.KNOWN_HOSTS }}
                    if_key_exists: fail
            -   name: Deploy
                run: |
                    ssh -i ~/.ssh/id_rsa ec2-user@api.fleet-manager.space "export APP_VERSION=${{ steps.get_version.outputs.VERSION }} && cd ~/www && ~/deploy.sh"
